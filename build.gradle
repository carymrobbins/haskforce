plugins {
    id "org.jetbrains.intellij" version "0.4.10"
}

version = file('version.txt').text.trim()

task validateDic(type: Exec) {
    commandLine './tools/validate-dic'
}

task runJFlex(type: Exec) {
    commandLine './tools/run-jflex'
}

task cleanJFlex(type: Exec) {
    commandLine './tools/run-jflex', 'clean'
}

ext {
    javaVersion = '1.8'
    scalaVersion = '2.12.4'
    scalaBinaryVersion = '2.12'
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'org.jetbrains.intellij'

    intellij {
        version = '2019.2.1'
        pluginName = 'HaskForce'
        updateSinceUntilBuild = true
        plugins = ['java', 'yaml']
    }

    repositories {
        mavenCentral()
    }

    configurations {
        provided
        compile.extendsFrom provided
    }

    dependencies {

        // Scala support
        compileOnly "org.scala-lang:scala-compiler:${scalaVersion}"
        compile "org.scala-lang:scala-reflect:${scalaVersion}"
        compile "org.scala-lang:scala-library:${scalaVersion}"

        compile "io.estatico:newtype_${scalaBinaryVersion}:0.1.0"
        compile "org.scalaz:scalaz-core_${scalaBinaryVersion}:7.2.17"
        compile "org.yaml:snakeyaml:1.16"

        compile     "com.github.plokhotnyuk.jsoniter-scala:jsoniter-scala-core_${scalaBinaryVersion}:2.0.2"
        compileOnly "com.github.plokhotnyuk.jsoniter-scala:jsoniter-scala-macros_${scalaBinaryVersion}:2.0.2"

        // Compile-time-only deps.
        compileOnly "com.google.code.findbugs:findbugs:3.0.1"
        compileOnly "com.google.guava:guava:21.0"
    }

    // NOTE: We have Scala and Java sources that depend on each other, and the java.srcDirs
    // will try to be compiled first, so instead we're just setting the scala.srcDirs.
    sourceSets {
        main {
            scala.srcDirs 'src', 'gen'
            resources.srcDirs 'resources'
        }
        test {
            scala.srcDirs 'tests'
            resources.srcDirs 'tests'
        }
    }
}

assemble.dependsOn(validateDic, runJFlex)

project(':jps-plugin') {
    dependencies {
        compile project(':jps-shared')
    }
}

dependencies {
    compile project(':macros')
    compile project(':jps-shared')
    compile project(':jps-plugin')
}

static def getGitRev() {
    def proc = "git rev-parse --short HEAD".execute()
    proc.waitFor()
    return proc.text.trim()
}

static def isGitDirty() {
    return "git diff-index --quiet HEAD".execute().waitFor() != 0
}

def getPluginVersion() {
    if (version.endsWith('SNAPSHOT')) {
        if (isGitDirty()) {
            return "$version-${getGitRev()}-dirty"
        } else {
            return "$version-${getGitRev()}"
        }
    } else {
        return version
    }
}

clean.dependsOn cleanJFlex

compileJava.dependsOn runJFlex

patchPluginXml {
    version = getPluginVersion()
    // Requiring >= 2017.3 to ensure compatibility with the Scala plugin (which uses 2.12)
    sinceBuild = '173'
}

// Allow re-running tests without forcing a recompile.
test.outputs.upToDateWhen { false }

buildPlugin {
    archiveName = "haskforce-${patchPluginXml.version}.zip"
}

test {
    if ("1" == System.getenv("OVERWRITE_FIXTURES")) {
        systemProperties.put("idea.tests.overwrite.data", "true")
    }
}
