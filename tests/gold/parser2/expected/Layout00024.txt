HASKELL_FILE
  PRAGMA_EXPR
    PsiElement({-#)('{-#')
    PsiElement(PRAGMA)('LANGUAGE')
    PRAGMA_LANGS
      PsiErrorElement:Expected language extension name
        <empty list>
    PsiErrorElement:Expected #-}
      <empty list>
  BODY
    UNKNOWN
      PsiElement(PRAGMA)('RecursiveDo')
      PsiElement(#-})('#-}')
    UNKNOWN
      PsiElement(module)('module')
      PsiElement(conidRegexp)('Layout00024')
      PsiElement(where)('where')
    PsiComment(comment)('-- https://downloads.haskell.org/~ghc/7.2.2/docs/html/users_guide/syntax-extns.html\n')
    UNKNOWN
      <empty list>
    UNKNOWN
      PsiElement(varidRegexp)('justOnes')
      PsiElement(=)('=')
      PsiElement(do)('do')
      PsiElement({)('{')
      PsiElement(rec)('rec')
      PsiElement({)('{')
      PsiElement(varidRegexp)('xs')
      PsiElement(<-)('<-')
      PsiElement(conidRegexp)('Just')
      PsiElement(()('(')
      PsiElement(integertoken)('1')
      PsiElement(:)(':')
      PsiElement(varidRegexp)('xs')
      PsiElement())(')')
      PsiElement(})('}')
      PsiElement(;)(';')
      PsiElement(varidRegexp)('return')
      PsiElement(()('(')
      PsiElement(varidRegexp)('map')
      PsiElement(varidRegexp)('negate')
      PsiElement(varidRegexp)('xs')
      PsiElement())(')')
      PsiElement(})('}')
    PsiComment(comment)('-- Indentation-based variant of above.\n')
    UNKNOWN
      <empty list>
    UNKNOWN
      PsiElement(varidRegexp)('justOnes'')
      PsiElement(=)('=')
      PsiElement(do)('do')
      PsiElement(rec)('rec')
      PsiElement(varidRegexp)('xs')
      PsiElement(<-)('<-')
      PsiElement(conidRegexp)('Just')
      PsiElement(()('(')
      PsiElement(integertoken)('1')
      PsiElement(:)(':')
      PsiElement(varidRegexp)('xs')
      PsiElement())(')')
      PsiElement(varidRegexp)('return')
      PsiElement(()('(')
      PsiElement(varidRegexp)('map')
      PsiElement(varidRegexp)('negate')
      PsiElement(varidRegexp)('xs')
      PsiElement())(')')
    PsiComment(comment)('-- https://github.com/carymrobbins/intellij-haskforce/issues/264\n')
    UNKNOWN
      <empty list>
    UNKNOWN
      <empty list>
    UNKNOWN
      PsiElement(varidRegexp)('grammar')
      PsiElement(::)('::')
      PsiElement(forall)('forall')
      PsiElement(varidRegexp)('r')
      PsiElement(.)('.')
      PsiElement(conidRegexp)('Grammar')
      PsiElement(varidRegexp)('r')
      PsiElement(()('(')
      PsiElement(conidRegexp)('Prod')
      PsiElement(varidRegexp)('r')
      PsiElement(conidRegexp)('String')
      PsiElement(conidRegexp)('String')
      PsiElement(conidRegexp)('Sentence')
      PsiElement())(')')
    UNKNOWN
      <empty list>
    UNKNOWN
      PsiElement(varidRegexp)('grammar')
      PsiElement(=)('=')
      PsiElement(do)('do')
      PsiElement(rec)('rec')
      PsiElement(varidRegexp)('nounPhrase')
      PsiElement(<-)('<-')
      PsiElement(varidRegexp)('rule')
      PsiElement($)('$')
      PsiElement(conidRegexp)('A_NP')
      PsiElement(VarsymPlus)('<$>')
      PsiElement(varidRegexp)('adjective')
      PsiElement(VarsymPlus)('<*>')
      PsiElement(varidRegexp)('nounPhrase')
      PsiElement(VarsymPlus)('<|>')
      PsiElement(conidRegexp)('N')
      PsiElement(VarsymPlus)('<$>')
      PsiElement(varidRegexp)('noun')
      PsiElement(VarsymPlus)('<|>')
      PsiElement(conidRegexp)('D_N')
      PsiElement(VarsymPlus)('<$>')
      PsiElement(varidRegexp)('determiner')
      PsiElement(VarsymPlus)('<*>')
      PsiElement(varidRegexp)('noun')
      PsiElement(VarsymPlus)('<|>')
      PsiElement(conidRegexp)('A_N')
      PsiElement(VarsymPlus)('<$>')
      PsiElement(varidRegexp)('adjective')
      PsiElement(VarsymPlus)('<*>')
      PsiElement(varidRegexp)('noun')
      PsiElement(VarsymPlus)('<?>')
      PsiElement(")('"')
      PsiElement(STRINGTOKEN)('noun phrase')
      PsiElement(")('"')
      PsiElement(let)('let')
      PsiElement(varidRegexp)('prepPhrase')
      PsiElement(::)('::')
      PsiElement(conidRegexp)('Prod')
      PsiElement(varidRegexp)('r')
      PsiElement(conidRegexp)('String')
      PsiElement(conidRegexp)('String')
      PsiElement(conidRegexp)('PrepPhrase')
      PsiElement(varidRegexp)('prepPhrase')
      PsiElement(=)('=')
      PsiElement(conidRegexp)('P_NP')
      PsiElement(VarsymPlus)('<$>')
      PsiElement(varidRegexp)('preposition')
      PsiElement(VarsymPlus)('<*>')
      PsiElement(varidRegexp)('nounPhrase')
      PsiElement(VarsymPlus)('<?>')
      PsiElement(")('"')
      PsiElement(STRINGTOKEN)('prepositional phrase')
      PsiElement(")('"')
      PsiElement(rec)('rec')
      PsiElement(varidRegexp)('verbPhrase')
      PsiElement(<-)('<-')
      PsiElement(varidRegexp)('rule')
      PsiElement($)('$')
      PsiElement(conidRegexp)('V_NP')
      PsiElement(VarsymPlus)('<$>')
      PsiElement(varidRegexp)('verb')
      PsiElement(VarsymPlus)('<*>')
      PsiElement(varidRegexp)('nounPhrase')
      PsiElement(VarsymPlus)('<|>')
      PsiElement(conidRegexp)('VP_PP')
      PsiElement(VarsymPlus)('<$>')
      PsiElement(varidRegexp)('verbPhrase')
      PsiElement(VarsymPlus)('<*>')
      PsiElement(varidRegexp)('prepPhrase')
      PsiElement(VarsymPlus)('<|>')
      PsiElement(conidRegexp)('V')
      PsiElement(VarsymPlus)('<$>')
      PsiElement(varidRegexp)('verb')
      PsiElement(VarsymPlus)('<?>')
      PsiElement(")('"')
      PsiElement(STRINGTOKEN)('verb phrase')
      PsiElement(")('"')