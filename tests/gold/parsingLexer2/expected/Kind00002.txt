{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('GADTs')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('ExistentialQuantification')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('FunctionalDependencies')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('TypeFamilies')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
module ('module')
WHITE_SPACE (' ')
conidRegexp ('Kind00002')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic leftbrace ('')
data ('data')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic leftbrace ('')
conidRegexp ('Lit')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Int')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
conidRegexp ('Int')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic semicolon ('')
conidRegexp ('Succ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
conidRegexp ('Int')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
conidRegexp ('Int')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic semicolon ('')
conidRegexp ('IsZero')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
conidRegexp ('Int')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
conidRegexp ('Bool')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic semicolon ('')
conidRegexp ('If')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
conidRegexp ('Bool')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic semicolon ('')
conidRegexp ('Pair')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
varidRegexp ('b')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Term')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('a')
, (',')
varidRegexp ('b')
) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic rightbrace ('')
Synthetic semicolon ('')
data ('data')
WHITE_SPACE (' ')
conidRegexp ('Counter')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
forall ('forall')
WHITE_SPACE (' ')
varidRegexp ('self')
. ('.')
WHITE_SPACE (' ')
conidRegexp ('NewCounter')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
varidRegexp ('_this')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
varidRegexp ('self')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
, (',')
WHITE_SPACE (' ')
varidRegexp ('_inc')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
varidRegexp ('self')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
varidRegexp ('self')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
, (',')
WHITE_SPACE (' ')
varidRegexp ('_display')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
varidRegexp ('self')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('IO')
WHITE_SPACE (' ')
conidRegexp ('()')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
, (',')
WHITE_SPACE (' ')
varidRegexp ('tag')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('setTag')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Counter')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Counter')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('setTag')
WHITE_SPACE (' ')
varidRegexp ('obj')
WHITE_SPACE (' ')
varidRegexp ('t')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
varidRegexp ('obj')
{ ('{')
WHITE_SPACE (' ')
varidRegexp ('tag')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
varidRegexp ('t')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
class ('class')
WHITE_SPACE (' ')
conidRegexp ('Monad')
WHITE_SPACE (' ')
varidRegexp ('m')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
conidRegexp ('MonadState')
WHITE_SPACE (' ')
varidRegexp ('s')
WHITE_SPACE (' ')
varidRegexp ('m')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
varidRegexp ('m')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
varidRegexp ('s')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic leftbrace ('')
varidRegexp ('get')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
varidRegexp ('m')
WHITE_SPACE (' ')
varidRegexp ('s')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic rightbrace ('')
Synthetic semicolon ('')
data ('data')
WHITE_SPACE (' ')
family ('family')
WHITE_SPACE (' ')
conidRegexp ('Array')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
class ('class')
WHITE_SPACE (' ')
conidRegexp ('Collects')
WHITE_SPACE (' ')
varidRegexp ('ce')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic leftbrace ('')
type ('type')
WHITE_SPACE (' ')
conidRegexp ('Elem2')
WHITE_SPACE (' ')
varidRegexp ('ce')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic rightbrace ('')
Synthetic semicolon ('')
type ('type')
WHITE_SPACE (' ')
family ('family')
WHITE_SPACE (' ')
conidRegexp ('F')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
type ('type')
WHITE_SPACE (' ')
instance ('instance')
WHITE_SPACE (' ')
conidRegexp ('F')
WHITE_SPACE (' ')
conidRegexp ('Int')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('Bool')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
type ('type')
WHITE_SPACE (' ')
instance ('instance')
WHITE_SPACE (' ')
conidRegexp ('F')
WHITE_SPACE (' ')
conidRegexp ('Float')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('Char')
Synthetic rightbrace ('')