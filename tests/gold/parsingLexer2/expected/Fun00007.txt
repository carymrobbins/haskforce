{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('RankNTypes')
WHITE_SPACE ('          ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('ScopedTypeVariables')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('StandaloneDeriving')
WHITE_SPACE ('  ')
#-} ('#-}')
WHITE_SPACE ('\n')
module ('module')
WHITE_SPACE (' ')
conidRegexp ('Fun00007')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
haddock ('-- | Cast a 'Size' to a 'RangeSet'\n')
Synthetic leftbrace ('')
varidRegexp ('sizeToRange')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
forall ('forall')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
. ('.')
WHITE_SPACE (' ')
conidRegexp ('Type')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
conidRegexp ('Size')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('RangeSet')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('sizeToRange')
WHITE_SPACE (' ')
varidRegexp ('sz')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
case ('case')
WHITE_SPACE (' ')
varidRegexp ('typeRep')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('TypeRep')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
of ('of')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic leftbrace ('')
conidRegexp ('IntType')
WHITE_SPACE (' ')
_ ('_')
WHITE_SPACE (' ')
_ ('_')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('RangeSet')
WHITE_SPACE (' ')
varidRegexp ('sz')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic semicolon ('')
_ ('_')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Universal')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic rightbrace ('')
Synthetic semicolon ('')
deriving ('deriving')
WHITE_SPACE (' ')
instance ('instance')
WHITE_SPACE (' ')
conidRegexp ('Typeable')
WHITE_SPACE (' ')
( ('(')
, (',')
, (',')
, (',')
, (',')
, (',')
, (',')
, (',')
, (',')
, (',')
, (',')
, (',')
, (',')
, (',')
, (',')
) (')')
Synthetic rightbrace ('')