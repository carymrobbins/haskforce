{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('ViewPatterns')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('TypeOperators')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('RankNTypes')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('FlexibleContexts')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('UnboxedTuples')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
module ('module')
WHITE_SPACE (' ')
conidRegexp ('Fun00004')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
haddock ('-- | A record with options for explicit passing in rewrite rules.\n')
Synthetic leftbrace ('')
data ('data')
WHITE_SPACE (' ')
conidRegexp ('FeldOpts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('FeldOpts')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
varidRegexp ('targets')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
[ ('[')
conidRegexp ('Target')
] (']')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
haddock ('-- | Default options.\n')
Synthetic semicolon ('')
varidRegexp ('defaultFeldOpts')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('FeldOpts')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('defaultFeldOpts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('FeldOpts')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
varidRegexp ('targets')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
haddock ('-- | Insert a variable into the environment\n')
Synthetic semicolon ('')
varidRegexp ('localVar')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Typeable')
WHITE_SPACE (' ')
varidRegexp ('b')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
conidRegexp ('VarId')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Info')
WHITE_SPACE (' ')
varidRegexp ('b')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Opt')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Opt')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('localVar')
WHITE_SPACE (' ')
varidRegexp ('v')
WHITE_SPACE (' ')
varidRegexp ('info')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
varidRegexp ('local')
WHITE_SPACE (' ')
$ ('$')
WHITE_SPACE (' ')
\ ('\')
varidRegexp ('env')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
varidRegexp ('env')
WHITE_SPACE (' ')
{ ('{')
varidRegexp ('varEnv')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('v')
, (',')
WHITE_SPACE (' ')
conidRegexp ('SomeInfo')
WHITE_SPACE (' ')
varidRegexp ('info')
) (')')
: (':')
varidRegexp ('varEnv')
WHITE_SPACE (' ')
varidRegexp ('env')
} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
haddock ('-- | It the expression is a literal, its value is returned, otherwise 'Nothing'\n')
Synthetic semicolon ('')
varidRegexp ('viewLiteral')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
forall ('forall')
WHITE_SPACE (' ')
varidRegexp ('info')
WHITE_SPACE (' ')
varidRegexp ('dom')
WHITE_SPACE (' ')
varidRegexp ('a')
. ('.')
WHITE_SPACE (' ')
( ('(')
( ('(')
conidRegexp ('Literal')
WHITE_SPACE (' ')
Consym (':||')
WHITE_SPACE (' ')
conidRegexp ('Type')
) (')')
WHITE_SPACE (' ')
Consym (':<:')
WHITE_SPACE (' ')
varidRegexp ('dom')
) (')')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
conidRegexp ('ASTF')
WHITE_SPACE (' ')
( ('(')
conidRegexp ('Decor')
WHITE_SPACE (' ')
varidRegexp ('info')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('dom')
WHITE_SPACE (' ')
Consym (':||')
WHITE_SPACE (' ')
conidRegexp ('Typeable')
) (')')
) (')')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Maybe')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('viewLiteral')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('prjF')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Just')
WHITE_SPACE (' ')
( ('(')
conidRegexp ('C'')
WHITE_SPACE (' ')
( ('(')
conidRegexp ('Literal')
WHITE_SPACE (' ')
varidRegexp ('a')
) (')')
) (')')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('Just')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('viewLiteral')
WHITE_SPACE (' ')
_ ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('Nothing')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('g')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
(# ('(#')
WHITE_SPACE (' ')
#) ('#)')
Synthetic rightbrace ('')