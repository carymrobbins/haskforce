{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('FlexibleInstances')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('QuasiQuotes')
WHITE_SPACE ('       ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('TemplateHaskell')
WHITE_SPACE ('   ')
#-} ('#-}')
WHITE_SPACE ('\n')
module ('module')
WHITE_SPACE (' ')
conidRegexp ('TempHask00002')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic leftbrace ('')
Quasi-[ ('[')
varidRegexp ('undefined')
| ('|')
Quasi-stuff ('\nsomething here "hello world"\n')
|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
[| ('[|')
WHITE_SPACE (' ')
integertoken ('7')
WHITE_SPACE (' ')
|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
Quasi-[ ('[')
varidRegexp ('d')
| ('|')
Quasi-stuff (' 7 ')
|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
Quasi-[ ('[')
varidRegexp ('t')
| ('|')
Quasi-stuff (' Int ')
|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
Quasi-[ ('[')
varidRegexp ('p')
| ('|')
Quasi-stuff (' 7 ')
|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
$( ('$(')
varidRegexp ('deriveStuff')
WHITE_SPACE (' ')
' (''')
varidRegexp ('f')
) (')')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('m')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
idsplice ('$x')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
'' ('''')
conidRegexp ('T')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('f')
WHITE_SPACE (' ')
varidRegexp ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
\ ('\')
WHITE_SPACE (' ')
Quasi-[ ('[')
varidRegexp ('haskell')
| ('|')
Quasi-stuff ('y')
|] ('|]')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
varidRegexp ('y')
+ ('+')
varidRegexp ('n')
Synthetic rightbrace ('')