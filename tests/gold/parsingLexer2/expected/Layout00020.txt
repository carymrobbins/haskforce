comment ('-- NOTE: This file is auto-generated.\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('DeriveDataTypeable')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('CPP')
WHITE_SPACE ('                ')
#-} ('#-}')
WHITE_SPACE ('\n')
haddock ('-- | Module to be shared between server and client.\n')
comment ('--\n')
comment ('-- This module must be valid for both GHC and Fay.\n')
module ('module')
WHITE_SPACE (' ')
conidRegexp ('Language')
. ('.')
conidRegexp ('Fay')
. ('.')
conidRegexp ('Yesod')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic leftbrace ('')
import ('import')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
conidRegexp ('Prelude')
WHITE_SPACE ('\n')
CPPIFDEF ('#ifdef FAY')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
import ('import')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
conidRegexp ('FFI')
WHITE_SPACE ('\n')
#else ('#else')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
import ('import')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
conidRegexp ('Fay')
. ('.')
conidRegexp ('FFI')
WHITE_SPACE ('\n')
#endif ('#endif')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
import ('import')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
conidRegexp ('Data')
. ('.')
conidRegexp ('Data')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
CPPIFDEF ('#ifdef FAY')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
data ('data')
WHITE_SPACE (' ')
conidRegexp ('Text')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('Text')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
deriving ('deriving')
WHITE_SPACE (' ')
( ('(')
conidRegexp ('Show')
, (',')
WHITE_SPACE (' ')
conidRegexp ('Read')
, (',')
WHITE_SPACE (' ')
conidRegexp ('Eq')
, (',')
WHITE_SPACE (' ')
conidRegexp ('Typeable')
, (',')
WHITE_SPACE (' ')
conidRegexp ('Data')
) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('fromString')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('String')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Text')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('fromString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
varidRegexp ('ffi')
WHITE_SPACE (' ')
" ('"')
STRINGTOKEN ('%1')
" ('"')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('toString')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Text')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('String')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('toString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
varidRegexp ('ffi')
WHITE_SPACE (' ')
" ('"')
STRINGTOKEN ('%1')
" ('"')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
#else ('#else')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
import ('import')
WHITE_SPACE (' ')
qualified ('qualified')
WHITE_SPACE (' ')
conidRegexp ('Data')
. ('.')
conidRegexp ('Text')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
conidRegexp ('T')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
type ('type')
WHITE_SPACE (' ')
conidRegexp ('Text')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('T')
. ('.')
conidRegexp ('Text')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('fromString')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('String')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Text')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('fromString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('T')
. ('.')
varidRegexp ('pack')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('toString')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Text')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('String')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('toString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('T')
. ('.')
varidRegexp ('unpack')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
#endif ('#endif')
Synthetic rightbrace ('')