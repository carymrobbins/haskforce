module ('module')
WHITE_SPACE (' ')
conidRegexp ('Pragma00002')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic leftbrace ('')
data ('data')
WHITE_SPACE (' ')
conidRegexp ('Vector')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
conidRegexp ('Pull')
WHITE_SPACE (' ')
conidRegexp ('DIM1')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('UNPACK')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE (' ')
! ('!')
varidRegexp ('a')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('f')
WHITE_SPACE (' ')
varidRegexp ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('CORE')
WHITE_SPACE (' ')
PRAGMA ('"foo"')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE (' ')
varidRegexp ('show')
) (')')
WHITE_SPACE (' ')
( ('(')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('CORE')
WHITE_SPACE (' ')
PRAGMA ('"bar"')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE (' ')
varidRegexp ('x')
) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('g')
WHITE_SPACE (' ')
varidRegexp ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
let ('let')
WHITE_SPACE (' ')
Synthetic leftbrace ('')
varidRegexp ('xs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('SCC')
WHITE_SPACE (' ')
PRAGMA ('"X"')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE (' ')
[ ('[')
integertoken ('1')
.. ('..')
integertoken ('1000000')
] (']')
WHITE_SPACE (' ')
Synthetic rightbrace ('')
in ('in')
WHITE_SPACE (' ')
varidRegexp ('x')
Synthetic rightbrace ('')