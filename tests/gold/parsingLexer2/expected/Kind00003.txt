{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('DataKinds')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('KindSignatures')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('GADTs')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
{-# ('{-#')
WHITE_SPACE (' ')
PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
PRAGMA ('TypeOperators')
WHITE_SPACE (' ')
#-} ('#-}')
WHITE_SPACE ('\n')
module ('module')
WHITE_SPACE (' ')
conidRegexp ('Kind00003')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
{- ('{-')
commenttext ('\n')
commenttext ('-')
commenttext ('-')
commenttext (' FIXME: Waiting on https://github.com/haskell')
commenttext ('-')
commenttext ('suite/haskell')
commenttext ('-')
commenttext ('src')
commenttext ('-')
commenttext ('exts/issues/125\ndata HList :: [*] ')
commenttext ('-')
commenttext ('> * where\n  HNil  :: HList '[]\n  HCons :: a ')
commenttext ('-')
commenttext ('> HList t ')
commenttext ('-')
commenttext ('> HList (a ': t)\n\n')
commenttext ('-')
commenttext ('-')
commenttext (' FIXME: Waiting on https://github.com/haskell')
commenttext ('-')
commenttext ('suite/haskell')
commenttext ('-')
commenttext ('src')
commenttext ('-')
commenttext ('exts/issues/124\ndata Tuple :: (*,*) ')
commenttext ('-')
commenttext ('> * where\n  Tuple :: a ')
commenttext ('-')
commenttext ('> b ')
commenttext ('-')
commenttext ('> Tuple '(a,b)\n')
-} ('-}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic leftbrace ('')
class ('class')
WHITE_SPACE (' ')
conidRegexp ('C1')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('a')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Bool')
WHITE_SPACE (' ')
{- ('{-')
commenttext (' 1 ')
-} ('-}')
) (')')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
Synthetic leftbrace ('')
varidRegexp ('c')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
varidRegexp ('proxy')
WHITE_SPACE (' ')
varidRegexp ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
conidRegexp ('Int')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic rightbrace ('')
Synthetic semicolon ('')
class ('class')
WHITE_SPACE (' ')
conidRegexp ('C2')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('a')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
[ ('[')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
] (']')
) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
class ('class')
WHITE_SPACE (' ')
conidRegexp ('C3')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('a')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
[ ('[')
( ('(')
conidRegexp ('Int')
, (',')
WHITE_SPACE (' ')
conidRegexp ('Double')
) (')')
] (']')
) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
class ('class')
WHITE_SPACE (' ')
conidRegexp ('C4')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('a')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
( ('(')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
) (')')
) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
data ('data')
WHITE_SPACE (' ')
conidRegexp ('X')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('a')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
[ ('[')
* ('*')
] (']')
) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('x1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
varidRegexp ('undefined')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('X')
WHITE_SPACE (' ')
' (''')
[ ('[')
conidRegexp ('Int')
] (']')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('x2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
varidRegexp ('undefined')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('X')
WHITE_SPACE (' ')
' (''')
[ ('[')
conidRegexp ('Int')
, (',')
WHITE_SPACE (' ')
conidRegexp ('Double')
] (']')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
data ('data')
WHITE_SPACE (' ')
conidRegexp ('Y')
WHITE_SPACE (' ')
( ('(')
varidRegexp ('a')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
( ('(')
* ('*')
, (',')
WHITE_SPACE (' ')
conidRegexp ('Bool')
) (')')
) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('y1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
varidRegexp ('undefined')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Y')
WHITE_SPACE (' ')
' (''')
( ('(')
conidRegexp ('Double')
, (',')
WHITE_SPACE (' ')
conidRegexp ('True')
) (')')
WHITE_SPACE ('\n')
Synthetic semicolon ('')
varidRegexp ('y2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
varidRegexp ('undefined')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
conidRegexp ('Y')
WHITE_SPACE (' ')
' (''')
( ('(')
conidRegexp ('Double')
, (',')
WHITE_SPACE (' ')
' (''')
conidRegexp ('False')
WHITE_SPACE (' ')
{- ('{-')
commenttext ('comment')
-} ('-}')
) (')')
Synthetic rightbrace ('')