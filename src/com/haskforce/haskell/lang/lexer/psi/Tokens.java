package com.haskforce.haskell.lang.lexer.psi;

public interface Tokens {
  // Copy pasta from gen/com/haskforce/psi/HaskellTypes
  // Adapted to use different token types from the ones generated by grammar-kit.
  // See src/com/haskforce/haskell/lang/lexer/_HaskellParsingLexer2.flex
  Token AMPERSAND = new Token("&");
  Token AMPERSAT = new Token("@");
  Token AS = new Token("as");
  Token ASTERISK = new Token("*");
  Token BACKSLASH = new Token("\\");
  Token BACKTICK = new Token("`");
  Token BADSTRINGTOKEN = new Token("badstringtoken");
  Token CARET = new Token("^");
  Token CASE = new Token("case");
  Token CHARTOKEN = new Token("chartoken");
  Token CLASSTOKEN = new Token("class");
  Token CLOSECOM = new Token("-}");
  Token CLOSEPRAGMA = new Token("#-}");
  Token COLON = new Token(":");
  Token COMMA = new Token(",");
  Token COMMENT = new Token("comment");
  Token COMMENTTEXT = new Token("commenttext");
  Token CONIDREGEXP = new Token("conidRegexp");
  Token CONSYMTOK = new Token("Consym");
  Token CPPDEFINE = new Token("CPPDEFINE");
  Token CPPELIF = new Token("CPPELIF");
  Token CPPELSE = new Token("#else");
  Token CPPENDIF = new Token("#endif");
  Token CPPIF = new Token("CPPIF");
  Token CPPIFDEF = new Token("CPPIFDEF");
  Token CPPINCLUDE = new Token("CPPINCLUDE");
  Token CPPLINE = new Token("CPPLINE");
  Token CPPPRAGMA = new Token("CPPPRAGMA");
  Token CPPUNDEF = new Token("CPPUNDEF");
  Token DASHES = new Token("dashes");
  Token DATA = new Token("data");
  Token DEFAULT = new Token("default");
  Token DERIVING = new Token("deriving");
  Token DO = new Token("do");
  Token DOLLAR = new Token("$");
  Token DOUBLEARROW = new Token("=>");
  Token DOUBLECOLON = new Token("::");
  Token DOUBLEHASH = new Token("##");
  Token DOUBLEPERIOD = new Token("..");
  Token DOUBLEQUOTE = new Token("\"");
  Token ELSE = new Token("else");
  Token EQUALS = new Token("=");
  Token EXCLAMATION = new Token("!");
  Token EXPORTTOKEN = new Token("export");
  Token FALSE = new Token("false");
  Token FAMILYTOKEN = new Token("family");
  Token FLOATTOKEN = new Token("floattoken");
  Token FORALLTOKEN = new Token("forall");
  Token FOREIGN = new Token("foreign");
  Token GREATERTHAN = new Token(">");
  Token HADDOCK = new Token("haddock");
  Token HASH = new Token("#");
  Token HIDING = new Token("hiding");
  Token IDSPLICE = new Token("idsplice");
  Token IF = new Token("if");
  Token IMPORT = new Token("import");
  Token IN = new Token("in");
  Token INFIX = new Token("infix");
  Token INFIXL = new Token("infixl");
  Token INFIXR = new Token("infixr");
  Token INFIXVARID = new Token("Infix varid");
  Token INSTANCE = new Token("instance");
  Token INTEGERTOKEN = new Token("integertoken");
  Token LBRACE = new Token("{");
  Token LBRACKET = new Token("[");
  Token LCASETOK = new Token("\\case");
  Token LEFTARROW = new Token("<-");
  Token LESSTHAN = new Token("<");
  Token LET = new Token("let");
  Token LPAREN = new Token("(");
  Token LTHOPEN = new Token("[|");
  Token LUNBOXPAREN = new Token("(#");
  Token MDOTOK = new Token("mdo");
  Token MINUS = new Token("-");
  Token MODULETOKEN = new Token("module");
  Token NEWTYPE = new Token("newtype");
  Token NULLCHARACTER = new Token("\\&");
  Token OF = new Token("of");
  Token OPENCOM = new Token("{-");
  Token OPENPRAGMA = new Token("{-#");
  Token PARENSPLICE = new Token("$(");
  Token PERCENT = new Token("%");
  Token PERIOD = new Token(".");
  Token PIPE = new Token("|");
  Token PLUS = new Token("+");
  Token PRAGMA = new Token("PRAGMA");
  Token QQOPEN = new Token("Quasi-[");
  Token QQTEXT = new Token("Quasi-stuff");
  Token QUALIFIED = new Token("qualified");
  Token QUESTION = new Token("?");
  Token RBRACE = new Token("}");
  Token RBRACKET = new Token("]");
  Token RECTOK = new Token("rec");
  Token RIGHTARROW = new Token("->");
  Token RPAREN = new Token(")");
  Token RTHCLOSE = new Token("|]");
  Token RUNBOXPAREN = new Token("#)");
  Token SEMICOLON = new Token(";");
  Token SHEBANGPATH = new Token("Synthetic shebang path");
  Token SHEBANGSTART = new Token("Synthetic shebang start \"#!\"");
  Token SINGLEQUOTE = new Token("'");
  Token SLASH = new Token("/");
  Token STRINGTOKEN = new Token("STRINGTOKEN");
  Token THEN = new Token("then");
  Token THQUOTE = new Token("''");
  Token TILDE = new Token("~");
  Token TRUE = new Token("true");
  Token TYPE = new Token("type");
  Token UNDERSCORE = new Token("_");
  Token VARIDREGEXP = new Token("varidRegexp");
  Token VARSYMTOK = new Token("VarsymToken");
  Token VARSYMTOKPLUS = new Token("VarsymPlus");
  Token WHERE = new Token("where");
  Token WHITESPACELBRACETOK = new Token("Synthetic leftbrace");
  Token WHITESPACERBRACETOK = new Token("Synthetic rightbrace");
  Token WHITESPACESEMITOK = new Token("Synthetic semicolon");
}
