package com.haskforce.haskell.lang.lexer.psi;

public interface Tokens {
  // Copy pasta from gen/com/haskforce/psi/HaskellTypes
  // Adapted to use different token types from the ones generated by grammar-kit.
  // See src/com/haskforce/haskell/lang/lexer/_HaskellParsingLexer2.flex

  // Specialized LexerToken types for IntelliJ's built in WHITE_SPACE and BAD_CHARACTER
  // This gives us the benefit of type checking to ensure we do not mix up
  // lexer tokens and parser elements when building parsers since both
  // are IElementType.
  LexerToken WHITE = new LexerToken("WHITE");
  LexerToken BAD = new LexerToken("BAD");

  LexerToken AMPERSAND = new LexerToken("&");
  LexerToken AMPERSAT = new LexerToken("@");
  LexerToken AS = new LexerToken("as");
  LexerToken ASTERISK = new LexerToken("*");
  LexerToken BACKSLASH = new LexerToken("\\");
  LexerToken BACKTICK = new LexerToken("`");
  LexerToken BADSTRINGTOKEN = new LexerToken("badstringtoken");
  LexerToken CARET = new LexerToken("^");
  LexerToken CASE = new LexerToken("case");
  LexerToken CHARTOKEN = new LexerToken("chartoken");
  LexerToken CLASSTOKEN = new LexerToken("class");
  LexerToken CLOSECOM = new LexerToken("-}");
  LexerToken CLOSEPRAGMA = new LexerToken("#-}");
  LexerToken COLON = new LexerToken(":");
  LexerToken COMMA = new LexerToken(",");
  LexerToken COMMENT = new LexerToken("comment");
  LexerToken COMMENTTEXT = new LexerToken("commenttext");
  LexerToken CONIDREGEXP = new LexerToken("conidRegexp");
  LexerToken CONSYMTOK = new LexerToken("Consym");
  LexerToken CPPDEFINE = new LexerToken("CPPDEFINE");
  LexerToken CPPELIF = new LexerToken("CPPELIF");
  LexerToken CPPELSE = new LexerToken("#else");
  LexerToken CPPENDIF = new LexerToken("#endif");
  LexerToken CPPIF = new LexerToken("CPPIF");
  LexerToken CPPIFDEF = new LexerToken("CPPIFDEF");
  LexerToken CPPINCLUDE = new LexerToken("CPPINCLUDE");
  LexerToken CPPLINE = new LexerToken("CPPLINE");
  LexerToken CPPPRAGMA = new LexerToken("CPPPRAGMA");
  LexerToken CPPUNDEF = new LexerToken("CPPUNDEF");
  LexerToken DASHES = new LexerToken("dashes");
  LexerToken DATA = new LexerToken("data");
  LexerToken DEFAULT = new LexerToken("default");
  LexerToken DERIVING = new LexerToken("deriving");
  LexerToken DO = new LexerToken("do");
  LexerToken DOLLAR = new LexerToken("$");
  LexerToken DOUBLEARROW = new LexerToken("=>");
  LexerToken DOUBLECOLON = new LexerToken("::");
  LexerToken DOUBLEHASH = new LexerToken("##");
  LexerToken DOUBLEPERIOD = new LexerToken("..");
  LexerToken DOUBLEQUOTE = new LexerToken("\"");
  LexerToken ELSE = new LexerToken("else");
  LexerToken EQUALS = new LexerToken("=");
  LexerToken EXCLAMATION = new LexerToken("!");
  LexerToken EXPORTTOKEN = new LexerToken("export");
  LexerToken FALSE = new LexerToken("false");
  LexerToken FAMILYTOKEN = new LexerToken("family");
  LexerToken FLOATTOKEN = new LexerToken("floattoken");
  LexerToken FORALLTOKEN = new LexerToken("forall");
  LexerToken FOREIGN = new LexerToken("foreign");
  LexerToken GREATERTHAN = new LexerToken(">");
  LexerToken HADDOCK = new LexerToken("haddock");
  LexerToken HASH = new LexerToken("#");
  LexerToken HIDING = new LexerToken("hiding");
  LexerToken IDSPLICE = new LexerToken("idsplice");
  LexerToken IF = new LexerToken("if");
  LexerToken IMPORT = new LexerToken("import");
  LexerToken IN = new LexerToken("in");
  LexerToken INFIX = new LexerToken("infix");
  LexerToken INFIXL = new LexerToken("infixl");
  LexerToken INFIXR = new LexerToken("infixr");
  LexerToken INFIXVARID = new LexerToken("Infix varid");
  LexerToken INSTANCE = new LexerToken("instance");
  LexerToken INTEGERTOKEN = new LexerToken("integertoken");
  LexerToken LBRACE = new LexerToken("{");
  LexerToken LBRACKET = new LexerToken("[");
  LexerToken LCASETOK = new LexerToken("\\case");
  LexerToken LEFTARROW = new LexerToken("<-");
  LexerToken LESSTHAN = new LexerToken("<");
  LexerToken LET = new LexerToken("let");
  LexerToken LPAREN = new LexerToken("(");
  LexerToken LTHOPEN = new LexerToken("[|");
  LexerToken LUNBOXPAREN = new LexerToken("(#");
  LexerToken MDOTOK = new LexerToken("mdo");
  LexerToken MINUS = new LexerToken("-");
  LexerToken MODULETOKEN = new LexerToken("module");
  LexerToken NEWTYPE = new LexerToken("newtype");
  LexerToken NULLCHARACTER = new LexerToken("\\&");
  LexerToken OF = new LexerToken("of");
  LexerToken OPENCOM = new LexerToken("{-");
  LexerToken OPENPRAGMA = new LexerToken("{-#");
  LexerToken PARENSPLICE = new LexerToken("$(");
  LexerToken PERCENT = new LexerToken("%");
  LexerToken PERIOD = new LexerToken(".");
  LexerToken PIPE = new LexerToken("|");
  LexerToken PLUS = new LexerToken("+");
  LexerToken PRAGMA = new LexerToken("PRAGMA");
  LexerToken QQOPEN = new LexerToken("Quasi-[");
  LexerToken QQTEXT = new LexerToken("Quasi-stuff");
  LexerToken QUALIFIED = new LexerToken("qualified");
  LexerToken QUESTION = new LexerToken("?");
  LexerToken RBRACE = new LexerToken("}");
  LexerToken RBRACKET = new LexerToken("]");
  LexerToken RECTOK = new LexerToken("rec");
  LexerToken RIGHTARROW = new LexerToken("->");
  LexerToken RPAREN = new LexerToken(")");
  LexerToken RTHCLOSE = new LexerToken("|]");
  LexerToken RUNBOXPAREN = new LexerToken("#)");
  LexerToken SEMICOLON = new LexerToken(";");
  LexerToken SHEBANGPATH = new LexerToken("Synthetic shebang path");
  LexerToken SHEBANGSTART = new LexerToken("Synthetic shebang start \"#!\"");
  LexerToken SINGLEQUOTE = new LexerToken("'");
  LexerToken SLASH = new LexerToken("/");
  LexerToken STRINGTOKEN = new LexerToken("STRINGTOKEN");
  LexerToken THEN = new LexerToken("then");
  LexerToken THQUOTE = new LexerToken("''");
  LexerToken TILDE = new LexerToken("~");
  LexerToken TRUE = new LexerToken("true");
  LexerToken TYPE = new LexerToken("type");
  LexerToken UNDERSCORE = new LexerToken("_");
  LexerToken VARIDREGEXP = new LexerToken("varidRegexp");
  LexerToken VARSYMTOK = new LexerToken("VarsymToken");
  LexerToken VARSYMTOKPLUS = new LexerToken("VarsymPlus");
  LexerToken WHERE = new LexerToken("where");
  LexerToken WHITESPACELBRACETOK = new LexerToken("Synthetic leftbrace");
  LexerToken WHITESPACERBRACETOK = new LexerToken("Synthetic rightbrace");
  LexerToken WHITESPACESEMITOK = new LexerToken("Synthetic semicolon");
}
