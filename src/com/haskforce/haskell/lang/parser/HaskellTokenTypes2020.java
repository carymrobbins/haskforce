package com.haskforce.haskell.lang.parser;

import com.haskforce.psi.HaskellTokenType;

public interface HaskellTokenTypes2020 {

  HaskellTokenType AMPERSAND = new HaskellTokenType("&");
  HaskellTokenType AMPERSAT = new HaskellTokenType("@");
  HaskellTokenType AS = new HaskellTokenType("as");
  HaskellTokenType ASTERISK = new HaskellTokenType("*");
  HaskellTokenType BACKSLASH = new HaskellTokenType("\\");
  HaskellTokenType BACKTICK = new HaskellTokenType("`");
  HaskellTokenType BADSTRINGTOKEN = new HaskellTokenType("badstringtoken");
  HaskellTokenType CARET = new HaskellTokenType("^");
  HaskellTokenType CASE = new HaskellTokenType("case");
  HaskellTokenType CHARTOKEN = new HaskellTokenType("chartoken");
  HaskellTokenType CLASSTOKEN = new HaskellTokenType("class");
  HaskellTokenType CLOSECOM = new HaskellTokenType("-}");
  HaskellTokenType CLOSEPRAGMA = new HaskellTokenType("#-}");
  HaskellTokenType COLON = new HaskellTokenType(":");
  HaskellTokenType COMMA = new HaskellTokenType(",");
  HaskellTokenType COMMENT = new HaskellTokenType("comment");
  HaskellTokenType COMMENTTEXT = new HaskellTokenType("commenttext");
  HaskellTokenType CONIDREGEXP = new HaskellTokenType("conidRegexp");
  HaskellTokenType CONSYMTOK = new HaskellTokenType("Consym");
  HaskellTokenType CPPDEFINE = new HaskellTokenType("CPPDEFINE");
  HaskellTokenType CPPELIF = new HaskellTokenType("CPPELIF");
  HaskellTokenType CPPELSE = new HaskellTokenType("#else");
  HaskellTokenType CPPENDIF = new HaskellTokenType("#endif");
  HaskellTokenType CPPIF = new HaskellTokenType("CPPIF");
  HaskellTokenType CPPIFDEF = new HaskellTokenType("CPPIFDEF");
  HaskellTokenType CPPINCLUDE = new HaskellTokenType("CPPINCLUDE");
  HaskellTokenType CPPLINE = new HaskellTokenType("CPPLINE");
  HaskellTokenType CPPPRAGMA = new HaskellTokenType("CPPPRAGMA");
  HaskellTokenType CPPUNDEF = new HaskellTokenType("CPPUNDEF");
  HaskellTokenType DASHES = new HaskellTokenType("dashes");
  HaskellTokenType DATA = new HaskellTokenType("data");
  HaskellTokenType DEFAULT = new HaskellTokenType("default");
  HaskellTokenType DERIVING = new HaskellTokenType("deriving");
  HaskellTokenType DO = new HaskellTokenType("do");
  HaskellTokenType DOLLAR = new HaskellTokenType("$");
  HaskellTokenType DOUBLEARROW = new HaskellTokenType("=>");
  HaskellTokenType DOUBLECOLON = new HaskellTokenType("::");
  HaskellTokenType DOUBLEHASH = new HaskellTokenType("##");
  HaskellTokenType DOUBLEPERIOD = new HaskellTokenType("..");
  HaskellTokenType DOUBLEQUOTE = new HaskellTokenType("\"");
  HaskellTokenType ELSE = new HaskellTokenType("else");
  HaskellTokenType EQUALS = new HaskellTokenType("=");
  HaskellTokenType EXCLAMATION = new HaskellTokenType("!");
  HaskellTokenType EXPORTTOKEN = new HaskellTokenType("export");
  HaskellTokenType FALSE = new HaskellTokenType("false");
  HaskellTokenType FAMILYTOKEN = new HaskellTokenType("family");
  HaskellTokenType FLOATTOKEN = new HaskellTokenType("floattoken");
  HaskellTokenType FORALLTOKEN = new HaskellTokenType("forall");
  HaskellTokenType FOREIGN = new HaskellTokenType("foreign");
  HaskellTokenType GREATERTHAN = new HaskellTokenType(">");
  HaskellTokenType HADDOCK = new HaskellTokenType("haddock");
  HaskellTokenType HASH = new HaskellTokenType("#");
  HaskellTokenType HIDING = new HaskellTokenType("hiding");
  HaskellTokenType IDSPLICE = new HaskellTokenType("idsplice");
  HaskellTokenType IF = new HaskellTokenType("if");
  HaskellTokenType IMPORT = new HaskellTokenType("import");
  HaskellTokenType IN = new HaskellTokenType("in");
  HaskellTokenType INFIX = new HaskellTokenType("infix");
  HaskellTokenType INFIXL = new HaskellTokenType("infixl");
  HaskellTokenType INFIXR = new HaskellTokenType("infixr");
  HaskellTokenType INFIXVARID = new HaskellTokenType("Infix varid");
  HaskellTokenType INSTANCE = new HaskellTokenType("instance");
  HaskellTokenType INTEGERTOKEN = new HaskellTokenType("integertoken");
  HaskellTokenType LBRACE = new HaskellTokenType("{");
  HaskellTokenType LBRACKET = new HaskellTokenType("[");
  HaskellTokenType LCASETOK = new HaskellTokenType("\\case");
  HaskellTokenType LEFTARROW = new HaskellTokenType("<-");
  HaskellTokenType LESSTHAN = new HaskellTokenType("<");
  HaskellTokenType LET = new HaskellTokenType("let");
  HaskellTokenType LPAREN = new HaskellTokenType("(");
  HaskellTokenType LTHOPEN = new HaskellTokenType("[|");
  HaskellTokenType LUNBOXPAREN = new HaskellTokenType("(#");
  HaskellTokenType MDOTOK = new HaskellTokenType("mdo");
  HaskellTokenType MINUS = new HaskellTokenType("-");
  HaskellTokenType MODULETOKEN = new HaskellTokenType("module");
  HaskellTokenType NEWTYPE = new HaskellTokenType("newtype");
  HaskellTokenType NULLCHARACTER = new HaskellTokenType("\\&");
  HaskellTokenType OF = new HaskellTokenType("of");
  HaskellTokenType OPENCOM = new HaskellTokenType("{-");
  HaskellTokenType OPENPRAGMA = new HaskellTokenType("{-#");
  HaskellTokenType PARENSPLICE = new HaskellTokenType("$(");
  HaskellTokenType PERCENT = new HaskellTokenType("%");
  HaskellTokenType PERIOD = new HaskellTokenType(".");
  HaskellTokenType PIPE = new HaskellTokenType("|");
  HaskellTokenType PLUS = new HaskellTokenType("+");
  HaskellTokenType PRAGMA = new HaskellTokenType("PRAGMA");
  HaskellTokenType QQOPEN = new HaskellTokenType("Quasi-[");
  HaskellTokenType QQTEXT = new HaskellTokenType("Quasi-stuff");
  HaskellTokenType QUALIFIED = new HaskellTokenType("qualified");
  HaskellTokenType QUESTION = new HaskellTokenType("?");
  HaskellTokenType RBRACE = new HaskellTokenType("}");
  HaskellTokenType RBRACKET = new HaskellTokenType("]");
  HaskellTokenType RECTOK = new HaskellTokenType("rec");
  HaskellTokenType RIGHTARROW = new HaskellTokenType("->");
  HaskellTokenType RPAREN = new HaskellTokenType(")");
  HaskellTokenType RTHCLOSE = new HaskellTokenType("|]");
  HaskellTokenType RUNBOXPAREN = new HaskellTokenType("#)");
  HaskellTokenType SEMICOLON = new HaskellTokenType(";");
  HaskellTokenType SHEBANGPATH = new HaskellTokenType("Synthetic shebang path");
  HaskellTokenType SHEBANGSTART = new HaskellTokenType("Synthetic shebang start \"#!\"");
  HaskellTokenType SINGLEQUOTE = new HaskellTokenType("'");
  HaskellTokenType SLASH = new HaskellTokenType("/");
  HaskellTokenType STRINGTOKEN = new HaskellTokenType("STRINGTOKEN");
  HaskellTokenType THEN = new HaskellTokenType("then");
  HaskellTokenType THQUOTE = new HaskellTokenType("''");
  HaskellTokenType TILDE = new HaskellTokenType("~");
  HaskellTokenType TRUE = new HaskellTokenType("true");
  HaskellTokenType TYPE = new HaskellTokenType("type");
  HaskellTokenType UNDERSCORE = new HaskellTokenType("_");
  HaskellTokenType VARIDREGEXP = new HaskellTokenType("varidRegexp");
  HaskellTokenType VARSYMTOK = new HaskellTokenType("Varsym");
  HaskellTokenType VARSYMTOKPLUS = new HaskellTokenType("VarsymPlus");
  HaskellTokenType WHERE = new HaskellTokenType("where");
  HaskellTokenType WHITESPACELBRACETOK = new HaskellTokenType("Synthetic leftbrace");
  HaskellTokenType WHITESPACERBRACETOK = new HaskellTokenType("Synthetic rightbrace");
  HaskellTokenType WHITESPACESEMITOK = new HaskellTokenType("Synthetic semicolon");
}
